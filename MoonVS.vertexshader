#version 330 
#extension GL_ARB_explicit_uniform_location : require
layout(location = 0) in vec3 vertexPosition_modelspace;

out vec3 col;
layout(location = 3)  uniform mat4 MVP;
layout(location = 20) uniform vec3 angleMoon;
layout(location = 23) uniform float radius;


vec3 mod289(vec3 x) {
    return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 mod289(vec4 x) {
    return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 permute(vec4 x) {
    return mod289(((x*34.0)+10.0)*x);
}

vec4 taylorInvSqrt(vec4 r)
{
  return 1.79284291400159 - 0.85373472095314 * r;
}

float snoise(vec3 v)
{ 
  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;
  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);

  vec3 i  = floor(v + dot(v, C.yyy) );
  vec3 x0 =   v - i + dot(i, C.xxx) ;

  vec3 g = step(x0.yzx, x0.xyz);
  vec3 l = 1.0 - g;
  vec3 i1 = min( g.xyz, l.zxy );
  vec3 i2 = max( g.xyz, l.zxy );

  vec3 x1 = x0 - i1 + C.xxx;
  vec3 x2 = x0 - i2 + C.yyy; 
  vec3 x3 = x0 - D.yyy;      

  i = mod289(i); 
  vec4 p = permute( permute( permute( 
             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))
           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) 
           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));

  float n_ = 0.142857142857; 
  vec3  ns = n_ * D.wyz - D.xzx;

  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  

  vec4 x_ = floor(j * ns.z);
  vec4 y_ = floor(j - 7.0 * x_ );    

  vec4 x = x_ *ns.x + ns.yyyy;
  vec4 y = y_ *ns.x + ns.yyyy;
  vec4 h = 1.0 - abs(x) - abs(y);

  vec4 b0 = vec4( x.xy, y.xy );
  vec4 b1 = vec4( x.zw, y.zw );

  
  vec4 s0 = floor(b0)*2.0 + 1.0;
  vec4 s1 = floor(b1)*2.0 + 1.0;
  vec4 sh = -step(h, vec4(0.0));

  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;

  vec3 p0 = vec3(a0.xy,h.x);
  vec3 p1 = vec3(a0.zw,h.y);
  vec3 p2 = vec3(a1.xy,h.z);
  vec3 p3 = vec3(a1.zw,h.w);


  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));
  p0 *= norm.x;
  p1 *= norm.y;
  p2 *= norm.z;
  p3 *= norm.w;


  vec4 m = max(0.5 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);
  m = m * m;
  return dot( m*m, vec4( dot(p0,x0), dot(p1,x1), 
                                dot(p2,x2), dot(p3,x3) ) );
}


void main(){	
    float strength = 0.5;
    float roughness = 1.8;
    vec3  noiseCenter = vec3(0.0, 0.0, 0.0);
    int   numberOfLayers = 4;
    float baseRoughness = 0.6;
    float frequency = baseRoughness;
    float persistance = 0.5;
    float noiseVal = 0.0;
    float amplitude = 1.1;
    float v;
    float minVal = 1.06;

    float strength1 = 0.3;
    float roughness1 = 1.2;
    vec3  noiseCenter1 = noiseCenter;
    int   numberOfLayers1 = 5;
    float baseRoughness1 = 3.0;
    float frequency1 = baseRoughness1;
    float persistance1 = 0.42;
    float noiseVal1 = 0.0;
    float amplitude1 = 1.0;
    float v1;
    float minVal1 = 1.25;

    float enable;
    float elev = 0.0;

    for(int i = 0; i < numberOfLayers; i++){
        v = 42 * snoise(vertexPosition_modelspace * frequency + noiseCenter);
        noiseVal += (1.0 + v) / 2.0 * amplitude;
        frequency *= roughness;
        amplitude *= persistance;
    }
    noiseVal = max(0.0, noiseVal - minVal) * strength;
    elev += noiseVal;

    if(elev > 0.0){
        enable = 1.0;
    }
    else{
        enable = 0.0;
    }

    for(int i = 0; i < numberOfLayers1; i++){
       v1 =  105.0 *  snoise(vertexPosition_modelspace * frequency1 + noiseCenter1);
        noiseVal1 += (1.0 + v) *2/3 * amplitude1;
        frequency1 *= roughness1;
        amplitude1 *= persistance1;
    }
    noiseVal1 = max(0.0, noiseVal1 - minVal1) * strength1;
    elev += noiseVal1 * enable;


    float h = elev * 1000.0;
    vec3 position = vec3(vertexPosition_modelspace.x * (1.0 + elev) * radius, vertexPosition_modelspace.y * (1.0 + elev) * radius, vertexPosition_modelspace.z * (1.0 + elev) * radius);
    gl_Position =  MVP * vec4(position + angleMoon, 1.0);
    

    if      (h < 20.0  )   col = vec3(0.3         ,  0.3 + h/60.0,          0.95);
    else if (h < 70.0  )   col = vec3(0.          ,        h/70.0,            0.);
    else if (h < 100.0 )   col = vec3(h/70.0 - 1.0,            1.,            0.);                    
    else if (h < 125.0 )   col = vec3(1.          , 2.0 - h/100.0,            0.);
    else                   col = vec3(1.          , h/125.0 - 1.0, h/125.0 - 1.0);

}

